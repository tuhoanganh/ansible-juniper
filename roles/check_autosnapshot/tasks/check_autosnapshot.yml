---
- name: INFORMATION - [Step 01] - Get Date
  set_fact: date_info="{{lookup('pipe','date +%Y%m%d')}}"
  run_once: true
  delegate_to: localhost

- name: INFORMATION - [Step 02] - Set directory for storing the log files
  set_fact:
    default_path: "files/check_autosnapshot"
  run_once: true
  delegate_to: localhost

- name: INFORMATION - [Step 03] - Create report file
  file:
    path: "{{ default_path }}/snapshot_status_{{ date_info }}.csv"
    state: touch
    mode: "u=rw,g=rw,o=rw"
  run_once: true
  delegate_to: localhost

- name: INFORMATION - [Step 04] - Create Temporary file
  file:
    path: "{{ default_path }}/{{ inventory_hostname }}.tmp"
    state: touch
    mode: "u=rw,g=rw,o=rw"
  
- name: INFORMATION - [Step 05] - Create column name in file
  lineinfile:
    dest: "{{ default_path }}/snapshot_status_{{ date_info }}.csv"
    line: "Hostname, IP, Snapshot Status"
  run_once: true
  delegate_to: localhost

- name: INFORMATION - [Step 07] - Write device version into temporary file
  lineinfile:
    dest: "{{ default_path }}/{{ inventory_hostname }}.tmp"
    line: "{{ inventory_hostname }},{{ ansible_host }},"
    state: present

- name: INFORMATION - [Step 05] - Get auto-snapshot Status
  junos_cli:
    host: "{{ ansible_host }}"
    user: "{{ juniper_user }}"
    passwd: "{{ juniper_passwd }}"
    cli: "show system auto-snapshot"
    dest: "{{ default_path }}/{{ inventory_hostname }}_snapshot.tmp"
    format: text


- name: INFORMATION - [Step 08] - Filter Auto-snapshot information
  shell: "{{ item }}"
  with_items:
     - "cat {{ default_path }}/{{ inventory_hostname }}_snapshot.tmp | grep 'Auto-snapshot Configuration' | awk '{print $3}' >> {{ default_path }}/{{ inventory_hostname }}.tmp"
     - "cat /dev/null > {{ default_path }}/{{ inventory_hostname }}_snapshot.tmp"
     - "cat {{ default_path }}/{{ inventory_hostname }}.tmp | tr '\n' ' ' > {{ default_path }}/{{ inventory_hostname }}_snapshot.tmp"
     - "echo '\n' >> {{ default_path }}/{{ inventory_hostname }}_snapshot.tmp"

- name: INFORMATION - [Step 09] - Collect all Auto-snapshot information and store into csv file
  shell: "{{ item }}"
  with_items:
#     - "sed -i 's/Auto-snapshot Configuration://g' {{ default_path }}/*_snapshot.tmp"
     - "cat {{ default_path }}/*_snapshot.tmp >> {{ default_path }}/snapshot_status_{{ date_info }}.csv"
     - 'sed -i "/^$/d" {{ default_path }}/snapshot_status_{{ date_info }}.csv'
  run_once: true
  delegate_to: localhost

- name: INFORMATION - [Step 09] - Clear Temp file
  shell:  "find {{ default_path }}/*.tmp -delete"
  run_once: true
  delegate_to: localhost



#- name: INFORMATION - [Step 08] - Collect all devices version and store into csv file
#  shell: "{{ item }}"
#  with_items:
#    - "cat {{ default_path }}/{{ inventory_hostname }}_snapshot.tmp | grep 'Auto-snapshot Configuration'  >> {{ default_path }}/{{ inventory_hostname }}.tmp"
#    - "sed -e 's/\nAuto-snapshot Configuration:   / /g' {{ default_path }}/{{ inventory_hostname }}.tmp >> {{ default_path }}/snapshot_status_{{ date_info }}.csv"
#    - "cat {{ default_path }}/{{ inventory_hostname }}.tmp >> {{ default_path }}/snapshot_status_{{ date_info }}.csv"


#cat files/check_autosnapshot/ACX10.tmp  | grep "Auto-snapshot Configuration" | awk '{print $3}'

#- name: INFORMATION - [Step 07] - Write device version into temporary file
#  lineinfile:
#    dest: "{{ default_path }}/{{ inventory_hostname }}.tmp"
#    line: "{{ inventory_hostname }},{{ ansible_host }},{{ device_version.facts.version }},{{ device_version.facts.version_RE0 }},{{ device_version.facts.version_RE1 }}"
#    state: present

#- name: INFORMATION - [Step 08] - Collect all devices version and store into csv file
#  shell: "{{ item }}"
#  with_items:
#    - "cat {{ default_path }}/*.tmp > {{ default_path }}/devices_version_{{ date_info }}.tmp"
#    - "sort {{ default_path }}/devices_version_{{ date_info }}.tmp >> {{ default_path }}/devices_version_{{ date_info }}.csv"
#  run_once: true
#  delegate_to: localhost

#- name: INFORMATION - [Step 09] - Clear Temp file
#  shell:  "find {{ default_path }}/*.tmp -delete"
#  run_once: true
#  delegate_to: localhost
