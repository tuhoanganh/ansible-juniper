/*
 * Version		: 2.2 - MOBI only
 * Last Modified: 7-3-2018
 * Platform		: all
 * Release		: 12.7 and above
 * changelog	: tu.doan: modify to support et and ge - modify to change threshold
 * changelog	: tu.doan: separate OID for RX/TX/Threshold >> deprecated, for Viettel only
 * changelog	: tu.doan: Hold 0.5 minutes before executing (let routing finish converging)
 * changelog	: tu.doan: Change early warning condition
 
 * Description	 : This event script automatically writes the receive optic laser
 * levels into the Utility MIB every thirty seconds.
 * 1.3.6.1.4.1.2636.3.47.1.1.5.1.2
 */
version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";


var $connection = jcs:open();
match / {


	expr jcs:syslog(25,"Optic.slax: Time interval is up OR detected link down/up --- Waiting 5 minutes before running script");
	
	expr jcs:sleep(30);
	<event-script-results>{
		
		expr jcs:syslog(25,"Optic.slax: Clearing old value from SNMP database");
		var $optic_value_snmp_util_object_name = "jnxUtilStringValue" _ ".79.112.116.105.99.46";
		var $rx_int_snmp_util_object_name = "jnxUtilIntegerValue" _ ".82.88.46";
		var $tx_int_snmp_util_object_name = "jnxUtilIntegerValue" _ ".84.88.46";
		var $rx_warn_int_snmp_util_object_name = "jnxUtilIntegerValue" _ ".82.120.65.108.97.114.109.46";
		var $rx_alarm_int_snmp_util_object_name = "jnxUtilIntegerValue" _ ".82.120.87.97.114.110.46";
		
		call CLEAR_RPC($snmp_util_object_name  = $optic_value_snmp_util_object_name, $snmp_util_object_type = "string" );
		call CLEAR_RPC($snmp_util_object_name  = $rx_int_snmp_util_object_name, $snmp_util_object_type = "integer" );
		call CLEAR_RPC($snmp_util_object_name  = $tx_int_snmp_util_object_name, $snmp_util_object_type = "integer" );
		call CLEAR_RPC($snmp_util_object_name  = $rx_warn_int_snmp_util_object_name, $snmp_util_object_type = "integer" );
		call CLEAR_RPC($snmp_util_object_name  = $rx_alarm_int_snmp_util_object_name, $snmp_util_object_type = "integer" );
		

		expr jcs:syslog(25,"Optic.slax: Writing optic info for GE/XE interfaces");
		var $intf_optics=jcs:execute( $connection, "get-interface-optics-diagnostics-information" );
		for-each( $intf_optics/physical-interface[(starts-with(name, 'ge-')) or (starts-with(name, 'xe-'))]){
			var $interface_name		=	name;		
			

			var $result= {call SET_1G_10GE_INSTANCE( $interface=$interface_name);}
		
		}
		
		expr jcs:syslog(25,"Optic.slax: Writing optic info for ET interfaces");
		for-each( $intf_optics/physical-interface[(starts-with(name, 'et-'))]){
			var $interface_name		=	name;		
			
			var $result= {call SET_100G_INSTANCE( $interface=$interface_name);}
		
		}
		expr jcs:close( $connection );
		
		expr jcs:syslog(25,"Optic.slax: finished executing");
	}
}

/*
 * set_instance - Sets the instance in the MIB
 */
template CLEAR_RPC($snmp_util_object_name, $snmp_util_object_type ) {
	var $walk_rpc = {
		<walk-snmp-object> {
			<snmp-object-name> $snmp_util_object_name;
		}
	}
	var $mib_objects =jcs:execute($connection,$walk_rpc);
	
	if (not(jcs:empty($mib_objects))){
		for-each( $mib_objects/snmp-object){
			var $old_instance=index/index-value;
			var $clear_rpc = {
				<request-snmp-utility-mib-clear> {
					<instance> $old_instance;
					<object-type> $snmp_util_object_type;
				}
			}
			var $results = jcs:execute( $connection, $clear_rpc );
		}
	}
}

/*
 * set_instance - Sets the instance in the MIB
 */
template SET_1G_10GE_INSTANCE($interface ) {

	var $rx_1G_10G={
		if ( optics-diagnostics/rx-signal-avg-optical-power-dbm ) {
			expr optics-diagnostics/rx-signal-avg-optical-power-dbm;
		}
		else if (optics-diagnostics/laser-rx-optical-power-dbm ){
			expr optics-diagnostics/laser-rx-optical-power-dbm;
		}
		else {
			expr "0.0000";
		}
	}
	var $tx_1G_10G						=	optics-diagnostics/laser-output-power-dbm;
	var $real_rx_alarm_threshold_1g_10g	=	optics-diagnostics/laser-rx-power-low-alarm-threshold-dbm;
	var $real_rx_warn_threshold_1g_10g	=	optics-diagnostics/laser-rx-power-low-warn-threshold-dbm;
	
	call SET_OPTIC_INSTANCES($interface,
							 $rx = $rx_1G_10G, 
							 $tx = $tx_1G_10G,
							 $real_rx_warn_threshold = $real_rx_alarm_threshold_1g_10g,
							 $real_rx_alarm_threshold = $real_rx_warn_threshold_1g_10g);
}


template SET_100G_INSTANCE($interface ) {

	var $rx_100G={
		if (optics-diagnostics/optics-diagnostics-lane-values/laser-rx-optical-power-dbm ){
			expr optics-diagnostics/optics-diagnostics-lane-values/laser-rx-optical-power-dbm;
		}
		else {
			expr "0.0000";
		}
	}
	
	var $real_rx_alarm_threshold_100G	=	optics-diagnostics/laser-rx-power-low-alarm_threshold-dbm;
	var $real_rx_warn_threshold_100G	=	optics-diagnostics/laser-rx-power-low-warn_threshold-dbm;
	var $tx_100G						=	optics-diagnostics/optics-diagnostics-lane-values/laser-output-power-dbm;
	
	
	call SET_OPTIC_INSTANCES($interface,
							 $rx = $rx_100G, 
							 $tx = $tx_100G,
							 $real_rx_warn_threshold = $real_rx_alarm_threshold_100G,
							 $real_rx_alarm_threshold = $real_rx_warn_threshold_100G);
}
template GET_INTERFACE_INDEX($interface ) {


	var $get_interface_rpc 		= {
		<get-interface-information> {
			<interface-name> $interface;
		}
	}
	var $get_interface_result 	= jcs:execute( $connection, $get_interface_rpc );
	var $index_result		= $get_interface_result/physical-interface/snmp-index;

	expr $index_result;
}


template GET_INTERFACE_DESCR($interface ) {


	var $get_interface_rpc 		= {
		<get-interface-information> {
			<interface-name> $interface;
		}
	}
	var $get_interface_result 	= jcs:execute( $connection, $get_interface_rpc );
	var $description_result		= $get_interface_result/physical-interface/description;

	expr $description_result;
}
template SET_OPTIC_INSTANCES($interface,$rx,$tx,$real_rx_warn_threshold,$real_rx_alarm_threshold){

	mvar $rx_alarm="OK";
	mvar $real_threshold = 0;
	mvar $custom_threshold = 0;
	
	mvar $custom_rx_alarm_threshold	=	$real_rx_warn_threshold;
	mvar $custom_rx_warn_threshold	=	$real_rx_warn_threshold + 3;
	
	/*set alarm flag base on comparision result*/
	if (		($rx < $custom_rx_alarm_threshold ) or ($rx == $custom_rx_alarm_threshold)){
		set $rx_alarm="CRITICAL";
		set $real_threshold = $real_rx_alarm_threshold;
		set $custom_threshold = $custom_rx_alarm_threshold;
	}
	else if (	($rx < $custom_rx_warn_threshold) or ($rx == $custom_rx_warn_threshold)){
		set $rx_alarm="WARNING";
		set $real_threshold = $real_rx_warn_threshold;
		set $custom_threshold = $custom_rx_warn_threshold;
	}
	else {
		set $rx_alarm="OK";
		set $real_threshold = $real_rx_warn_threshold;
		set $custom_threshold = $custom_rx_warn_threshold;
	}
	var $int_descr = {call GET_INTERFACE_DESCR( $interface);}
	
	/*create text instance name and value*/
	var $optic_value			=	 $int_descr _  "-;-" _ $rx_alarm _ "/Rx:" _ $rx _ "/Tx:" _ $tx _ "/NMS-WarnThreshold:" _ $custom_rx_warn_threshold _ "/NMS-AlarmThreshold:" _ $custom_rx_alarm_threshold;
	var $optic_value_instance	=	"Optic."_ $interface;
	
	
	/*write text instance */
	var $optic_value_rpc = {
		<request-snmp-utility-mib-set> {
			<instance> $optic_value_instance;
			<object-type> "string";
			<object-value> $optic_value;
		}
	}
	
	expr jcs:execute($connection,$optic_value_rpc);
	


}

